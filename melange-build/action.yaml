name: 'Build single package with Melange'
description: |
  This action generates a package using Melange. It assumes that
  the Melange repository is already configured.

inputs:
  version:
    description: 'Version of melange to install (tip, latest-release, v0.5.5, etc.)'
    required: true
    default: 'latest-release'
  
  config:
    description: |
      The config file to use for building the package.
    default: .melange.yaml

  multi-config:
    description: |
      Comma-separated list of config files to use for building package(s).
    default: ''

  config-file-license:
    description: |
      License to use for the melange config itself.
    default: Apache-2.0

  archs:
    description: |
      The architectures to use.
    default: x86_64

  sign-with-temporary-key:
    description: |
      Sign packages with a temporary key, useful for multi-stage
      pipelines.
    default: false

  sign-with-key:
    description: |
      Sign packages with a key, useful for multi-stage
      pipelines.
    default: false

  signing-key-path:
    description: |
      The path for the signing key if signing is enabled.
    default: ''

  repository-path:
    description: |
      The path of the repository being constructed by Melange.
    default: ${{ github.workspace }}/packages

  tests-repository-append:
    description: |
      A list of paths or URIs of repositories that should be
      implicitly included in the test environment.
    default: ''

  repository-append:
    description: |
      A list of paths or URIs of repositories that should be
      implicitly included in the build environment.
    default: ''

  tests-keyring-append:
    description: |
      A list of paths or URIs of keys that should be included
      in the test environment.
    default: ''

  keyring-append:
    description: |
      A list of paths or URIs of keys that should be included
      in the build environment.
    default: ''

  workspace-dir:
    description: |
      The directory to use as the workspace.
    default: ''

  namespace:
    description: |
      Namespace string to use in SBOM purls identifying built packages (eg wolfi, alpine)
    default: ''

  empty-workspace:
    description: |
      Whether to use an empty workspace or not.
    default: false

  source-dir:
    description: |
      The source directory to use if empty-workspace is false.
    default: ${{ github.workspace }}

  s3-bucket-name:
    required: true

  cache-dir:
    description: |
      Directory used for cached inputs.
    default: ''

  pipeline-dir:
    description: |
      Directory used for pipelines.
    default: ${{ github.workspace }}/pipelines

  git-commit:
    description: |
      Commit hash of the git repository containing the build config file.
    default: ''

  git-repo-url:
    description: |
      URL of the git repository containing the build config file.
    default: ''

  build-date:
    description: |
      Build date to use for the package.
    default: ''

runs:
  using: 'composite'

  steps:
    - name: Setup Qemu Action
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # 3.6.0
    
    - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
      with:
        go-version: '1.23.4'
        check-latest: true
        cache: false
    
    - name: 'Install dependencies'
      shell: bash
      run: |
        sudo apt install -y build-essential git jq
    
    - name: 'Install dependencies (bubblewrap)'
      shell: bash
      run: |
        sudo apt install -y libcap-dev meson ninja-build
        git clone https://github.com/containers/bubblewrap
        pushd bubblewrap
        meson setup --prefix=/usr -Drequire_userns=true . output
        cd output
        ninja
        sudo ninja install
        popd
        rm -rf bubblewrap

    - name: 'Install melange'
      if:
      shell: bash
      run: |
        set -ex

        # Install melange:
        # - if version is "tip", install from tip of main.
        # - if version is "latest-release", look up latest release.
        # - otherwise, install the specified version.
        case ${{ inputs.version }} in
        tip)
          TMP_CLONE_DIR="$(mktemp -d)"
          git clone https://github.com/chainguard-dev/melange "${TMP_CLONE_DIR}"
          pushd "${TMP_CLONE_DIR}"
          make melange
          sudo env "PATH=$PATH" make install
          popd
          rm -rf "${TMP_CLONE_DIR}"
          ;;
        latest-release)
          # fetch the latest 20 releases, we need to filter by the ones that have assets.
          releases=$(curl -s -u "username:${{ github.token }}" https://api.github.com/repos/chainguard-dev/melange/releases?per_page=20)

          # search for the first release that has assets.
          tag=$(echo $releases | jq -r 'first(.[] | select(.assets | length > 0) | .tag_name)')
          if [[ -z ${tag} ]]; then
            # this should, ideally, never happen.
            echo "No melange release with assets found"
            exit 1
          fi
          ;;
        *)
          tag="${{ inputs.version }}"
        esac

        if [[ ! -z ${tag} ]]; then
          case "$(echo $RUNNER_ARCH | awk '{print tolower($0)}')" in
          x86|x64) ARCH=amd64;;
          arm64)   ARCH=arm64;;
          *)
            echo Unsupported RUNNER_ARCH \"$RUNNER_ARCH\"
            exit -1
            ;;
          esac
          case "$(echo $RUNNER_OS | awk '{print tolower($0)}')" in
          "linux") OS=linux;;
          "macos") OS=osx;;
          *)
            echo Unsupported RUNNER_OS \"$RUNNER_OS\"
            exit -1
            ;;
          esac

          without_v=${tag#"v"}
          echo "Installing melange @ ${tag}"
          curl -fsL https://github.com/chainguard-dev/melange/releases/download/${tag}/melange_${without_v}_${OS}_${ARCH}.tar.gz | sudo tar xzf - --strip-components=1 -C /usr/local/bin
        fi

        melange version

    - name: Validate inputs
      shell: bash
      run: |
        if [[ "${{ inputs.sign-with-key }}" == "true" && "${{ inputs.sign-with-temporary-key }}" == "true" ]]; then
          echo "Error: Both 'sign-with-key' and 'sign-with-temporary-key' cannot be enabled at the same time."
          exit 1
        fi

        if [[ ("${{ inputs.sign-with-key }}" == "true" || "${{ inputs.sign-with-temporary-key }}" == "true") && -z "${{ inputs.signing-key-path }}" ]]; then
          echo "Error: 'signing-key-path' cannot be empty when 'sign-with-key' or 'sign-with-temporary-key' is enabled."
          exit 1
        fi

        if [[ -z "$AWS_ACCESS_KEY_ID" ]]; then
          echo "Error: AWS_ACCESS_KEY_ID is not set."
          exit 1
        fi

        if [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          echo "Error: AWS_SECRET_ACCESS_KEY is not set."
          exit 1
        fi

        if [[ -z "$ENDPOINT_URL" ]]; then
          echo "Error: ENDPOINT_URL is not set."
          exit 1
        fi
    
    - name: Generate temporary signing key
      if: ${{ inputs.sign-with-temporary-key == 'true' && inputs.signing-key-path != '' }}
      shell: bash
      run: |
        melange keygen "${{ inputs.signing-key-path }}"

    - name: Set signing key
      if: ${{ inputs.sign-with-key == 'true' && inputs.signing-key-path != '' }}
      shell: bash
      run: |
        set +x
        echo -n "$MELANGE_PRIVATE_KEY" > "${{ inputs.signing-key-path }}"
        chmod 400 "${{ inputs.signing-key-path }}"
        set -x

    - name: 'Build packages'
      shell: bash
      run: |
        [ -n "${{ inputs.repository-append }}" ] && repoarg="--repository-append ${{ inputs.repository-append }}"
        [ -n "${{ inputs.keyring-append }}" ] && keyringarg="--keyring-append ${{ inputs.keyring-append }}"
        [ -n "${{ inputs.workspace-dir }}" ] && workspacearg="--workspace-dir ${{ inputs.workspace-dir }}"
        [ -n "${{ inputs.namespace }}" ] && nsarg="--namespace ${{ inputs.namespace }}"
        [ -n "${{ inputs.cache-dir }}" ] && cachearg="--cache-dir=${{ inputs.cache-dir }}"
        [ -n "${{ inputs.pipeline-dir }}" ] && pipelinedirarg="--pipeline-dir=${{ inputs.pipeline-dir }}"
        [ -n "${{ inputs.git-commit }}" ] && gitcommitarg="--git-commit ${{ inputs.git-commit }}"
        [ -n "${{ inputs.git-repo-url }}" ] && gitrepoarg="--git-repo-url ${{ inputs.git-repo-url }}"
        [ -n "${{ inputs.build-date }}" ] && builddatearg="--build-date=${{ inputs.build-date }}"
        ${{ inputs.empty-workspace }} && workspacearg="$workspacearg --empty-workspace"
        ${{ inputs.empty-workspace }} || workspacearg="$workspacearg --source-dir ${{ inputs.source-dir }}/$(dirname "${{ inputs.config }}")"
        ${{ inputs.sign-with-key || inputs.sign-with-temporary-key }} && signarg="--signing-key ${{ inputs.signing-key-path }}"
        melangeconfigs="${{ inputs.multi-config }}"
        [[ "${melangeconfigs}" != "" ]] || melangeconfigs="${{ inputs.config }}"
        
        for config in ${melangeconfigs//,/ }; do
          if [[ -d "${{ inputs.repository-path }}" ]]; then
            repoarg="${repoarg} --repository-append ${{ inputs.repository-path }}"
            keyringarg="${keyringarg} --keyring-append ${{ inputs.signing-key-path }}.pub"
          fi
          sudo melange build "$config" --license "${{ inputs.config-file-license }}" --arch "${{ inputs.archs }}" --out-dir "${{ inputs.repository-path }}" $signarg $repoarg $keyringarg $workspacearg $nsarg $cachearg $pipelinedirarg $gitcommitarg $gitrepoarg $builddatearg
        done
        
        sudo chown -R runner:runner "${{ inputs.repository-path }}"
    
    - name: 'Test packages and merge Index'
      shell: bash
      run: |
        [ -n "${{ inputs.tests-repository-append }}" ] && repoarg="--repository-append=${{ inputs.tests-repository-append }}"
        [ -n "${{ inputs.tests-keyring-append }}" ] && keyringarg="--keyring-append=${{ inputs.tests-keyring-append }}"
        [ -n "${{ inputs.workspace-dir }}" ] && workspacearg="--workspace-dir ${{ inputs.workspace-dir }}"
        [ -n "${{ inputs.cache-dir }}" ] && cachearg="--cache-dir=${{ inputs.cache-dir }}"
        [ -n "${{ inputs.pipeline-dir }}" ] && pipelinedirarg="--pipeline-dirs=${{ inputs.pipeline-dir }}"
        ${{ inputs.empty-workspace }} && workspacearg="$workspacearg --empty-workspace"
        ${{ inputs.empty-workspace }} || workspacearg="$workspacearg --source-dir ${{ inputs.source-dir }}/$(dirname "${{ inputs.config }}")"
        ${{ inputs.sign-with-key || inputs.sign-with-temporary-key }} && signarg="--signing-key ${{ inputs.signing-key-path }}"
        melangeconfigs="${{ inputs.multi-config }}"
        [[ "${melangeconfigs}" != "" ]] || melangeconfigs="${{ inputs.config }}"
        
        for config in ${melangeconfigs//,/ }; do
          if [[ -d "${{ inputs.repository-path }}" ]]; then
            repoarg="${repoarg} --repository-append=${{ inputs.repository-path }}"
            keyringarg="${keyringarg} --keyring-append=${{ inputs.signing-key-path }}.pub"
          fi
          sudo melange test "$config" --arch "${{ inputs.archs }}" $repoarg $keyringarg $workspacearg $pipelinedirarg
        done
        if aws s3 ls "s3://${{ inputs.s3-bucket-name }}/${{ inputs.archs }}/APKINDEX.tar.gz" --endpoint-url="$ENDPOINT_URL" > /dev/null 2>&1; then
          echo "APKINDEX.tar.gz found in S3 bucket. Downloading index and merging."
          aws s3 cp "s3://${{ inputs.s3-bucket-name }}/${{ inputs.archs }}/APKINDEX.tar.gz" /tmp/APKINDEX.tar.gz --endpoint-url="$ENDPOINT_URL"
          melange index $signarg --output "${{ inputs.repository-path }}/${{ inputs.archs }}/APKINDEX.tar.gz" "${{ inputs.repository-path }}/${{ inputs.archs }}"/*.apk --source /tmp/APKINDEX.tar.gz --merge
        else
          echo "APKINDEX.tar.gz not found in S3 bucket. Creating a new index."
          melange index $signarg --output "${{ inputs.repository-path }}/${{ inputs.archs }}/APKINDEX.tar.gz" "${{ inputs.repository-path }}/${{ inputs.archs }}"/*.apk
        fi

    - name: 'Copy files to s3'
      shell: bash
      run: |
        aws s3 cp --recursive "${{ inputs.repository-path }}/" "s3://${{ inputs.s3-bucket-name }}/" --endpoint-url "$ENDPOINT_URL" --checksum-algorithm CRC32
