name: 'Build single package with Melange'
description: |
  This action generates a package using Melange. It assumes that
  the Melange repository is already configured.

inputs:
  config:
    description: |
      The config file to use for building the package.
    default: .melange.yaml

  config-file-license:
    description: |
      License to use for the melange config itself.
    default: Apache-2.0

  archs:
    description: |
      The architectures to use.
    default: x86_64

  sign-with-temporary-key:
    description: |
      Sign packages with a temporary key, useful for multi-stage
      pipelines.
    default: false

  sign-with-key:
    description: |
      Sign packages with a key, useful for multi-stage
      pipelines.
    default: false

  signing-key-path:
    description: |
      The path for the signing key if signing is enabled.
    default: ''

  repository-path:
    description: |
      The path of the repository being constructed by Melange.
    default: ${{ github.workspace }}/packages

  tests-repository-append:
    description: |
      A list of paths or URIs of repositories that should be
      implicitly included in the test environment.
    default: ''

  repository-append:
    description: |
      A list of paths or URIs of repositories that should be
      implicitly included in the build environment.
    default: ''

  tests-keyring-append:
    description: |
      A list of paths or URIs of keys that should be included
      in the test environment.
    default: ''

  keyring-append:
    description: |
      A list of paths or URIs of keys that should be included
      in the build environment.
    default: ''

  workspace-dir:
    description: |
      The directory to use as the workspace.
    default: ''

  namespace:
    description: |
      Namespace string to use in SBOM purls identifying built packages (eg wolfi, alpine)
    default: ''

  empty-workspace:
    description: |
      Whether to use an empty workspace or not.
    default: false

  source-dir:
    description: |
      The source directory to use if empty-workspace is false.
    default: ${{ github.workspace }}

  s3-bucket-name:
    required: true

  cache-dir:
    description: |
      Directory used for cached inputs.
    default: ''

  pipeline-dir:
    description: |
      Directory used for pipelines.
    default: ${{ github.workspace }}/pipelines

  git-commit:
    description: |
      Commit hash of the git repository containing the build config file.
    default: ''

  git-repo-url:
    description: |
      URL of the git repository containing the build config file.
    default: ''

  commit-date:
    default: true

runs:
  using: 'composite'

  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ "${{ inputs.sign-with-key }}" == "true" && "${{ inputs.sign-with-temporary-key }}" == "true" ]]; then
          echo "Error: Both 'sign-with-key' and 'sign-with-temporary-key' cannot be enabled at the same time."
          exit 1
        fi
        if [[ ("${{ inputs.sign-with-key }}" == "true" || "${{ inputs.sign-with-temporary-key }}" == "true") && -z "${{ inputs.signing-key-path }}" ]]; then
          echo "Error: 'signing-key-path' cannot be empty when 'sign-with-key' or 'sign-with-temporary-key' is enabled."
          exit 1
        fi
        if [[ -z "$AWS_ACCESS_KEY_ID" || -z "$AWS_SECRET_ACCESS_KEY" || -z "$ENDPOINT_URL" ]]; then
          echo "AWS credentials or endpoint not configured"
          exit 1
        fi

    - name: Extract commit date from first git-checkout step
      id: commit-date
      if: ${{ inputs.commit-date == 'true' }}
      shell: bash
      run: |
        EXPECTED_COMMIT=$(yq '.pipeline[] | select(.uses == "git-checkout") | .with["expected-commit"]' "${{ inputs.config }}" | head -n 1)
        REPO_URL=$(yq '.pipeline[] | select(.uses == "git-checkout") | .with["repository"]' "${{ inputs.config }}" | head -n 1)
        
        if [[ -z "$EXPECTED_COMMIT" || -z "$REPO_URL" ]]; then
          echo "No git-checkout step or expected-commit found. Skipping commit date extraction."
          echo "commit-date=" >> "$GITHUB_OUTPUT"
          exit 0
        fi
        
        REPO=$(echo "$REPO_URL" | sed -E 's#https://github.com/([^/]+/[^/]+)(\.git)?#\1#')
        
        COMMIT_DATE=$(curl -s \
          "https://api.github.com/repos/$REPO/commits/$EXPECTED_COMMIT" \
          | jq -r '.commit.committer.date')     
        
        if [[ "$COMMIT_DATE" == "null" || -z "$COMMIT_DATE" ]]; then
          echo "Unable to retrieve commit date from GitHub API for $REPO@$EXPECTED_COMMIT"
          echo "commit-date=" >> "$GITHUB_OUTPUT"
          exit 0
        fi
  
        echo "commit-date=$COMMIT_DATE" >> "$GITHUB_OUTPUT"

    - name: Generate temporary signing key
      if: ${{ inputs.sign-with-temporary-key == 'true' && inputs.signing-key-path != '' }}
      shell: bash
      run: |
        docker run --rm -v "${{ github.workspace }}:${{ github.workspace }}" -w "${{ github.workspace }}" cgr.dev/chainguard/melange keygen "${{ inputs.signing-key-path }}"

    - name: Set signing key from secret
      if: ${{ inputs.sign-with-key == 'true' && inputs.signing-key-path != '' }}
      shell: bash
      run: |
        echo -n "$MELANGE_PRIVATE_KEY" > "${{ inputs.signing-key-path }}"
        chmod 400 "${{ inputs.signing-key-path }}"

    - name: Build package
      shell: bash
      run: |
        args=()
        args+=(build "${{ inputs.config }}")
        args+=(--license "${{ inputs.config-file-license }}" --arch "${{ inputs.archs }}" --out-dir "${{ inputs.repository-path }}")

        [ -n "${{ inputs.repository-append }}" ] && args+=(--repository-append "${{ inputs.repository-append }}")
        [ -n "${{ inputs.keyring-append }}" ] && args+=(--keyring-append "${{ inputs.keyring-append }}")
        [ -n "${{ inputs.workspace-dir }}" ] && args+=(--workspace-dir "${{ inputs.workspace-dir }}")
        [ -n "${{ inputs.namespace }}" ] && args+=(--namespace "${{ inputs.namespace }}")
        [ -n "${{ inputs.cache-dir }}" ] && args+=(--cache-dir "${{ inputs.cache-dir }}")
        [ -n "${{ inputs.pipeline-dir }}" ] && args+=(--pipeline-dir "${{ inputs.pipeline-dir }}")
        [ -n "${{ inputs.git-commit }}" ] && args+=(--git-commit "${{ inputs.git-commit }}")
        [ -n "${{ inputs.git-repo-url }}" ] && args+=(--git-repo-url "${{ inputs.git-repo-url }}")
        [ -n "${{ steps.commit-date.outputs.commit-date }}" ] && args+=(--build-date "${{ steps.commit-date.outputs.commit-date }}")

        if [[ "${{ inputs.empty-workspace }}" == "true" ]]; then
          args+=(--empty-workspace)
        else
          args+=(--source-dir "${{ inputs.source-dir }}/$(dirname "${{ inputs.config }}")")
        fi

        if [[ "${{ inputs.sign-with-key }}" == "true" || "${{ inputs.sign-with-temporary-key }}" == "true" ]]; then
          args+=(--signing-key "${{ inputs.signing-key-path }}")
        fi

        docker run --privileged --rm -v "${{ github.workspace }}:${{ github.workspace }}" -w "${{ github.workspace }}" \
          cgr.dev/chainguard/melange "${args[@]}"

    - name: Check config if build is reproducible
      id: is_reproducible
      shell: bash
      run: |
        REPRODUCIBLE=$(yq eval '.environment.environment.REPRODUCIBLE' "${{ inputs.config }}")
    
        if [ -z "$REPRODUCIBLE" ] || [ "$REPRODUCIBLE" = "null" ]; then
          REPRODUCIBLE="true"
        fi

        echo "reproducible=$REPRODUCIBLE" >> $GITHUB_OUTPUT

    - name: Rebuild package
      if: steps.is_reproducible.outputs.reproducible == 'true'
      shell: bash
      run: |
        args=()
        args+=(rebuild "${{ inputs.repository-path }}"/"${{ inputs.archs }}"/*.apk)

        if [[ "${{ inputs.sign-with-key }}" == "true" || "${{ inputs.sign-with-temporary-key }}" == "true" ]]; then
          args+=(--signing-key "${{ inputs.signing-key-path }}")
        fi

        if [[ "${{ inputs.empty-workspace }}" == "true" ]]; then
          args+=(--empty-workspace)
        else
          args+=(--source-dir "${{ inputs.source-dir }}/$(dirname "${{ inputs.config }}")")
        fi
        
        docker run --privileged --rm -v "${{ github.workspace }}:${{ github.workspace }}" -w "${{ github.workspace }}" \
          cgr.dev/chainguard/melange "${args[@]}"
    
    - name: Test package and merge Index
      shell: bash
      run: |
        args=()
        args+=(test "${{ inputs.config }}" --arch "${{ inputs.archs }}" --test-package-append busybox)

        if [[ -d "${{ inputs.repository-path }}" ]]; then
          args+=(--repository-append "${{ inputs.repository-path }}")
          args+=(--keyring-append "${{ inputs.signing-key-path }}.pub")
        fi

        [ -n "${{ inputs.tests-repository-append }}" ] && args+=(--repository-append "${{ inputs.tests-repository-append }}")
        [ -n "${{ inputs.tests-keyring-append }}" ] && args+=(--keyring-append "${{ inputs.tests-keyring-append }}")
        [ -n "${{ inputs.workspace-dir }}" ] && args+=(--workspace-dir "${{ inputs.workspace-dir }}")
        [ -n "${{ inputs.pipeline-dir }}" ] && args+=(--pipeline-dirs "${{ inputs.pipeline-dir }}")

        if [[ "${{ inputs.empty-workspace }}" == "true" ]]; then
          args+=(--empty-workspace)
        else
          args+=(--source-dir "${{ inputs.source-dir }}/$(dirname "${{ inputs.config }}")")
        fi

        docker run --privileged --rm -v "${{ github.workspace }}:${{ github.workspace }}" -w "${{ github.workspace }}" \
          cgr.dev/chainguard/melange "${args[@]}"

        apkindex_path="${{ inputs.repository-path }}/${{ inputs.archs }}/APKINDEX.tar.gz"
        if aws s3 ls "s3://${{ inputs.s3-bucket-name }}/${{ inputs.archs }}/APKINDEX.tar.gz" --endpoint-url="$ENDPOINT_URL" > /dev/null 2>&1; then
          aws s3 cp "s3://${{ inputs.s3-bucket-name }}/${{ inputs.archs }}/APKINDEX.tar.gz" "${{ github.workspace }}"/APKINDEX.tar.gz --endpoint-url="$ENDPOINT_URL"
          docker run --rm -v "${{ github.workspace }}:${{ github.workspace }}" -w "${{ github.workspace }}" \
            cgr.dev/chainguard/melange index \
            --signing-key "${{ inputs.signing-key-path }}" \
            --output "$apkindex_path" "${{ inputs.repository-path }}/${{ inputs.archs }}"/*.apk \
            --source "${{ github.workspace }}"/APKINDEX.tar.gz --merge
        else
          docker run --rm -v "${{ github.workspace }}:${{ github.workspace }}" \
            cgr.dev/chainguard/melange index \
            --signing-key "${{ inputs.signing-key-path }}" \
            --output "$apkindex_path" "${{ inputs.repository-path }}/${{ inputs.archs }}"/*.apk
        fi
  
    - name: 'Copy files to s3'
      shell: bash
      run: |
        aws s3 cp --recursive "${{ inputs.repository-path }}/" "s3://${{ inputs.s3-bucket-name }}/" --endpoint-url "$ENDPOINT_URL"
