name: 'Build image snapshot with apko'
description: |
  This action builds an OCI image with apko, given a config file
  and base tag to use.

inputs:
  apko-image:
    description: |
      The digest of the apko image to invoke.
    default: ghcr.io/wolfi-dev/sdk:latest
    required: true

  config:
    description: |
      The config file to use for building the image.
    required: true
    default: .apko.yaml

  lockfile:
    description: |
      The lock file that constraints versions of packages.
    required: false
    default: ''

  base-tag:
    description: |
      The container repository into which we should publish images.
    default: ghcr.io/${{ github.repository }}
    required: true

  target-tag:
    description: |
      The tag this build will produce upon success.  It will also be used
      to form a date-based variant for tracking over time.
    default: rolling
    required: true

  registry:
    description: |
      Which registry to use.
    default: ghcr.io
    required: true

  username:
    description: |
      The username to use for docker login step.
    required: true
    default: ${{ github.repository_owner }}

  token:
    description: |
      The token to use for docker login step.
    required: true
    default: ${{ github.token }}

  keyring-append:
    description: |
      The value to pass to --keyring-append.
    required: false
    default: ''

  build-repository-append:
    description: |
      The value to pass to --build-repository-append.
    required: false
    default: ''

  repository-append:
    description: |
      The value to pass to --repository-append.
    required: false
    default: ''

  package-append:
    description: |
      The value to pass to --package-append.
    default: ''

  archs:
    description: |
      The architectures to build for.
    required: false
    default: ''

  build-options:
    description: |
      Build options to enable (comma-separated).
    default: ''

  additional-tags:
    description: |
      Additional tags for the final image.
    required: false
    default: ''

  sbom-attest:
    description: |
      Upload SBOMs as attestations.
    required: false
    default: true

  slsa-attest:
    description: |
      Upload build provenance information as attestation.
    required: false
    default: true

  generic-user:
    description: |
      Username to login to registry.
    required: false
    default: ''

  generic-pass:
    description: |
      Password to login to registry.
    required: false
    default: ''

  debug:
    description: |
      Enable debug logging.
    required: false
    default: 'false'

  image_refs:
    description: |
      The value to pass to --image-refs.
    default: apko.images

  automount-src:
    description: |
      In subsequent steps, if this directory is found, create a copy at automount-dest (inside container)
    default: ${{ github.workspace }}/.apko-automount

  automount-dest:
    description: |
      In subsequent steps, if automount-src is found, create a copy at this location (inside container)
    default: /work

  source-date-epoch:
    description: |
      The UNIX timestamp to use as the source date when building an image.
    default: ''

  annotations:
    description: |
      Annotations to add to the final image. Format: key1:value1,key2:value2.
    required: false
    default: ''

  vars_context:
    description: "Serialized GitHub vars context"
    required: false
    default: '{}'

  FULCIO_URL:
    required: false
    description: address of sigstore PKI server (default "https://fulcio.sigstore.dev")
    default: "https://fulcio.sigstore.dev"

  REKOR_URL:
    required: false
    description: address of rekor STL server (default "https://rekor.sigstore.dev")
    default: "https://rekor.sigstore.dev"

  UPLOAD_GITHUB_CODE:
    description: |
      Upload Scan results to github security
    required: false
    default: "false"

  RUN_TRIVY:
    description: Run trivy scan or not.
    required: true
    default: "true"

  RUN_GRYPE:
    description: Run grype scan or not.
    required: true
    default: "true"

  RUN_SNYK:
    description: Run snyk scan or not, set SNYK_TOKEN as well
    required: true
    default: "true"

  SNYK_TOKEN:
    description: |
      SNYK Token for vul scanning
    required: true

  SNYK_VERSION:
    description: |
      SNYK Token for vul scanning
    required: false
    default: "v1.966.0"

outputs:
  digest:
    value: ${{ steps.apko.outputs.digest }}
    description: |
      The digest of the published container image.
  digest-index:
    value: ${{ steps.extract.outputs.digest-index }}
  digest-amd64:
    value: ${{ steps.extract.outputs.digest-amd64 }}
  digest-arm64:
    value: ${{ steps.extract.outputs.digest-arm64 }}
  digest-386:
    value: ${{ steps.extract.outputs.digest-386 }}
  digest-armv6:
    value: ${{ steps.extract.outputs.digest-armv6 }}
  digest-armv7:
    value: ${{ steps.extract.outputs.digest-armv7 }}
  digest-ppc64le:
    value: ${{ steps.extract.outputs.digest-ppc64le }}
  digest-riscv64:
    value: ${{ steps.extract.outputs.digest-riscv64 }}
  digest-s390x:
    value: ${{ steps.extract.outputs.digest-s390x }}
  shortdigest-index:
    value: ${{ steps.extract.outputs.shortdigest-index }}
  shortdigest-amd64:
    value: ${{ steps.extract.outputs.shortdigest-amd64 }}
  shortdigest-arm64:
    value: ${{ steps.extract.outputs.shortdigest-arm64 }}
  shortdigest-386:
    value: ${{ steps.extract.outputs.shortdigest-386 }}
  shortdigest-armv6:
    value: ${{ steps.extract.outputs.shortdigest-armv6 }}
  shortdigest-armv7:
    value: ${{ steps.extract.outputs.shortdigest-armv7 }}
  shortdigest-ppc64le:
    value: ${{ steps.extract.outputs.shortdigest-ppc64le }}
  shortdigest-riscv64:
    value: ${{ steps.extract.outputs.shortdigest-riscv64 }}
  shortdigest-s390x:
    value: ${{ steps.extract.outputs.shortdigest-s390x }}
  TRIVY_COUNT:
    value: ${{ steps.scan-report.outputs.TRIVY_COUNT }}
  GRYPE_COUNT:
    value: ${{ steps.scan-report.outputs.GRYPE_COUNT }}
  SNYK_COUNT:
    value: ${{ steps.scan-report.outputs.SNYK_COUNT }}

runs:
  using: composite
  steps:
    - name: Setup Cosign
      uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
      with:
        cosign-release: 'v2.5.0'
    
    - name: Setup Crane
      uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4

    - name: Setup QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Setup Syft
      shell: bash
      run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin -v

    - name: Generate dynamic inputs for apko-publish
      shell: bash
      id: apko-publish-inputs
      run: |
        # If sbom-attest enabled, write SBOMs to working directory to attest later
        echo "sbom-path=${{ inputs.sbom-attest && '.' || ''}}" >> $GITHUB_OUTPUT

    - uses: d4rkfella/actions/apko-publish@main
      id: apko
      with:
        apko-image: ${{ inputs.apko-image }}
        config: ${{ inputs.config }}
        lockfile: ${{ inputs.lockfile }}
        tag: ${{ inputs.base-tag }}:${{ inputs.target-tag }}
        image_refs: ${{ inputs.image_refs }}
        keyring-append: ${{ inputs.keyring-append }}
        build-repository-append: ${{ inputs.build-repository-append }}
        repository-append: ${{ inputs.repository-append }}
        package-append: ${{ inputs.package-append }}
        archs: ${{ inputs.archs }}
        debug: ${{ inputs.debug }}
        automount-src: ${{ inputs.automount-src }}
        automount-dest: ${{ inputs.automount-dest }}
        build-options: ${{ inputs.build-options }}
        generic-user: ${{ inputs.generic-user }}
        generic-pass: ${{ inputs.generic-pass }}
        annotations: ${{ inputs.annotations }}
        source-date-epoch: ${{ inputs.source-date-epoch }}
        sbom-path: ${{ steps.apko-publish-inputs.outputs.sbom-path }}

    - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.token }}

    - shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        cosign sign --yes $(cat ${{ inputs.image_refs }}) \
            --fulcio-url ${{ inputs.FULCIO_URL }}  --rekor-url ${{ inputs.REKOR_URL }} \
            -a sha=${{ github.sha }} \
            -a run_id=${{ github.run_id }} \
            -a run_attempt=${{ github.run_attempt }}

    - name: Extract the digests for each architecture
      id: extract
      shell: bash
      run: |
        output="digest-index=${{ steps.apko.outputs.digest }}"
        echo "Adding GitHub step output: ${output}"
        echo "${output}" >> $GITHUB_OUTPUT
        output="shortdigest-index=$(echo "${{ steps.apko.outputs.digest }}" | cut -d@ -f 2)"
        echo "Adding GitHub step output: ${output}"
        echo "${output}" >> $GITHUB_OUTPUT

        # If its an index, extract the platform digests too
        CRANE_MANIFEST_OUTPUT="$(crane manifest ${{ steps.apko.outputs.digest }})"
        if [[ "$(echo $CRANE_MANIFEST_OUTPUT | jq -r .mediaType)" == "application/vnd.oci.image.index.v1+json" ]]; then
          for combo in `echo $CRANE_MANIFEST_OUTPUT | jq -r '.manifests[] | .platform.architecture + .platform.variant + "_" + .digest'`; do
            arch="$(echo "${combo}" | cut -d "_" -f1)"
            digest="$(echo "${combo}" | cut -d "_" -f2)"
            output="digest-${arch}=${{ inputs.base-tag }}@${digest}"
            echo "Adding GitHub step output: ${output}"
            echo "${output}" >> $GITHUB_OUTPUT
            output="shortdigest-${arch}=${digest}"
            echo "Adding GitHub step output: ${output}"
            echo "${output}" >> $GITHUB_OUTPUT
          done
        fi

    - name: Upload SBOMs as attestations
      if: ${{ inputs.sbom-attest == 'true' }}
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        function attest_sbom {
          arch="${1}"
          digest="${2}"
          sbomfile="${3}"
          if [[ "${sbomfile}" == "" ]]; then
            echo "Unknown architecture: ${arch}. Exiting."
            exit 1
          fi
          if [[ ! -f "${sbomfile}" ]]; then
            echo "Unable to find SBOM on disk: ${sbomfile} (arch: ${arch}). Exiting."
            exit 1
          fi
          echo "Attaching ${sbomfile} to ${digest} as spdxjson attestation (arch: ${arch}) ..."
          cosign attest  --yes --type spdxjson --predicate "${sbomfile}" "${digest}"
          rm -f "${sbomfile}"
        }

        # First attest the index SBOM
        attest_sbom "index" "${{ steps.extract.outputs.digest-index }}" "sbom-index.spdx.json"

        # Next, for each architecture (if present)
        [[ "${{ steps.extract.outputs.digest-amd64 }}" == "" ]] || attest_sbom "amd64" "${{ steps.extract.outputs.digest-amd64 }}" "sbom-x86_64.spdx.json"
        [[ "${{ steps.extract.outputs.digest-arm64 }}" == "" ]] || attest_sbom "arm64" "${{ steps.extract.outputs.digest-arm64 }}" "sbom-aarch64.spdx.json"
        [[ "${{ steps.extract.outputs.digest-386 }}" == "" ]] || attest_sbom "386" "${{ steps.extract.outputs.digest-386 }}" "sbom-x86.spdx.json"
        [[ "${{ steps.extract.outputs.digest-armv6 }}" == "" ]] || attest_sbom "armv6" "${{ steps.extract.outputs.digest-armv6 }}" "sbom-armhf.spdx.json"
        [[ "${{ steps.extract.outputs.digest-armv7 }}" == "" ]] || attest_sbom "armv7" "${{ steps.extract.outputs.digest-armv7 }}" "sbom-armv7.spdx.json"
        [[ "${{ steps.extract.outputs.digest-ppc64le }}" == "" ]] || attest_sbom "ppc64le" "${{ steps.extract.outputs.digest-ppc64le }}" "sbom-ppc64le.spdx.json"
        [[ "${{ steps.extract.outputs.digest-riscv64 }}" == "" ]] || attest_sbom "riscv64" "${{ steps.extract.outputs.digest-riscv64 }}" "sbom-riscv64.spdx.json"
        [[ "${{ steps.extract.outputs.digest-s390x }}" == "" ]] || attest_sbom "s390x" "${{ steps.extract.outputs.digest-s390x }}" "sbom-s390x.spdx.json"

    - name: 'SLSA: Generate provenance and attest'
      if: ${{ inputs.slsa-attest == 'true' }}
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
        GENERATOR_REPOSITORY: slsa-framework/slsa-github-generator
        GENERATOR_RELEASE_TAG: v2.1.0
        GENERATOR_RELEASE_BINARY: slsa-generator-container-linux-amd64
        GENERATOR_RELEASE_BINARY_SHA256: cee1453de115735379dd98dc80f70c73a66fcfefb5674e062f8765a1021e4cc6
        GH_TOKEN: "${{ github.token }}"
        GITHUB_CONTEXT: "${{ toJSON(github) }}"
        VARS_CONTEXT: "${{ inputs.vars_context }}"
      run: |
        set -x
      
        gh release -R "${GENERATOR_REPOSITORY}" download "${GENERATOR_RELEASE_TAG}" -p "${GENERATOR_RELEASE_BINARY}"
        COMPUTED_HASH="$(sha256sum "${GENERATOR_RELEASE_BINARY}" | awk '{print $1}')"
        if [[ "${COMPUTED_HASH}" != "${GENERATOR_RELEASE_BINARY_SHA256}" ]]; then
          echo "Mismatched checksums (wanted ${GENERATOR_RELEASE_BINARY_SHA256} got ${COMPUTED_HASH}). Exiting."
          exit 1
        fi
        chmod +x "${GENERATOR_RELEASE_BINARY}"

        trap "rm -f provenance.json" EXIT
        echo "Generating SLSA build provenance ..."
        "./${GENERATOR_RELEASE_BINARY}" generate --predicate="provenance.json"
        echo "Provenance doc:"
        cat provenance.json | jq

        function attest_slsa {
          arch="${1}"
          digest="${2}"
          echo "Attaching SLSA build provenance to ${digest} (arch: ${arch}) ..."
          cosign attest  --yes --type slsaprovenance --predicate="provenance.json" "${digest}"
        }

        attest_slsa "index" "${{ steps.extract.outputs.digest-index }}"

        [[ "${{ steps.extract.outputs.digest-amd64 }}" == "" ]] || attest_slsa "amd64" "${{ steps.extract.outputs.digest-amd64 }}"
        [[ "${{ steps.extract.outputs.digest-arm64 }}" == "" ]] || attest_slsa "arm64" "${{ steps.extract.outputs.digest-arm64 }}"
        [[ "${{ steps.extract.outputs.digest-386 }}" == "" ]] || attest_slsa "386" "${{ steps.extract.outputs.digest-386 }}"
        [[ "${{ steps.extract.outputs.digest-armv6 }}" == "" ]] || attest_slsa "armv6" "${{ steps.extract.outputs.digest-armv6 }}"
        [[ "${{ steps.extract.outputs.digest-armv7 }}" == "" ]] || attest_slsa "armv7" "${{ steps.extract.outputs.digest-armv7 }}"
        [[ "${{ steps.extract.outputs.digest-ppc64le }}" == "" ]] || attest_slsa "ppc64le" "${{ steps.extract.outputs.digest-ppc64le }}"
        [[ "${{ steps.extract.outputs.digest-riscv64 }}" == "" ]] || attest_slsa "riscv64" "${{ steps.extract.outputs.digest-riscv64 }}"
        [[ "${{ steps.extract.outputs.digest-s390x }}" == "" ]] || attest_slsa "s390x" "${{ steps.extract.outputs.digest-s390x }}"

    - shell: bash
      run: |
        set -x

        crane cp ${{ steps.apko.outputs.digest }} ${{ inputs.base-tag }}:${{ inputs.target-tag }}

        for tag in $(echo ${{ inputs.additional-tags }} | sed "s/,/ /g")
        do
          crane cp ${{ steps.apko.outputs.digest }} ${{ inputs.base-tag }}:$tag
        done

    - id: scan-start
      run: |
        echo "date=$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
      shell: bash

    - id: install-snyk
      if: inputs.RUN_SNYK == 'true'
      name: Run Snyk to check Docker image for vulnerabilities
      shell: bash
      env:
        SNYK_TOKEN: ${{ inputs.SNYK_TOKEN }}
        SNYK_VERSION: ${{ inputs.SNYK_VERSION }}
      run: |
        set -ex

        SNYK_DOWNLOAD="snyk-linux"

        if [ "$RUNNER_OS" == "Linux" ]; then
          SNYK_DOWNLOAD="snyk-linux"
        elif [ "$RUNNER_OS" == "Windows" ]; then
          SNYK_DOWNLOAD="snyk-win.exe"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          SNYK_DOWNLOAD="snyk-macos"
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi

        curl -s -o snyk https://static.snyk.io/cli/${SNYK_VERSION}/${SNYK_DOWNLOAD}

        echo "SNYK_VERSION=${SNYK_VERSION}" >> $GITHUB_ENV
        echo "SNYK_URL=https://static.snyk.io/cli/${SNYK_VERSION}/${SNYK_DOWNLOAD}" >> $GITHUB_ENV

        chmod +x snyk

    - name: Run Snyk to check Docker image for vulnerabilities
      if: inputs.RUN_SNYK == 'true'
      shell: bash
      env:
        SNYK_TOKEN: ${{ inputs.SNYK_TOKEN }}
      run: |
        ./snyk container test ${{ steps.apko.outputs.digest }} \
        --app-vulns --json --severity-threshold=low \
        --json-file-output=snyk.json >/dev/null || true

    - name: Cosign Attest Snyk results
      if: inputs.RUN_SNYK == 'true'
      shell: bash
      id: snyk-attest
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        ATTESTATION=$(mktemp)

        echo "Snyk SCANNER_URI: ${{ env.SNYK_URL }}"
        echo "Snyk SCANNER_VERSION: ${{ env.SNYK_VERSION }}"

        cat > "${ATTESTATION}" <<EOF
        {
            "invocation": {
              "parameters": null,
              "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "event_id": "${{ github.run_id }}",
              "builder.id": "${{ github.workflow }}"
            },
            "scanner": {
              "uri": "${{ env.SNYK_URL }}",
              "version": "${{ env.SNYK_VERSION }}",
              "result": $(cat snyk.json | jq .)
            },
            "metadata": {
              "scanStartedOn": "${{ steps.scan-start.outputs.date }}",
              "scanFinishedOn": "$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")"
            }
        }
        EOF

        export COSIGN_EXPERIMENTAL="$COSIGN_EXPERIMENTAL"

        cosign attest --yes  --fulcio-url ${{ inputs.FULCIO_URL }}  --rekor-url ${{ inputs.REKOR_URL }} \
        --type vuln --predicate "${ATTESTATION}" ${{ steps.apko.outputs.digest }}

    - name:  Scan image with AquaSec/Trivy
      if: inputs.RUN_TRIVY == 'true'
      uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
      id: trivy-scan
      with:
        image-ref: ${{ steps.apko.outputs.digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 0
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'

    - name: Cosign Attest trivy results
      if: inputs.RUN_TRIVY == 'true'
      shell: bash
      id: trivy-attest
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        ATTESTATION=$(mktemp)

        export SCANNER_URI=$(cat trivy-results.sarif | jq -r .runs[0].tool.driver.informationUri)
        export SCANNER_VERSION=$(cat trivy-results.sarif | jq -r .runs[0].tool.driver.version)

        echo "trivy SCANNER_URI: $SCANNER_URI"
        echo "trivy SCANNER_VERSION: $SCANNER_VERSION"

        cat > "${ATTESTATION}" <<EOF
        {
            "invocation": {
              "parameters": null,
              "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "event_id": "${{ github.run_id }}",
              "builder.id": "${{ github.workflow }}"
            },
            "scanner": {
              "uri": "$SCANNER_URI",
              "version": "$SCANNER_VERSION",
              "result": $(cat trivy-results.sarif | jq .)
            },
            "metadata": {
              "scanStartedOn": "${{ steps.scan-start.outputs.date }}",
              "scanFinishedOn": "$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")"
            }
        }
        EOF

        export COSIGN_EXPERIMENTAL="$COSIGN_EXPERIMENTAL"

        cosign attest --yes  --fulcio-url ${{ inputs.FULCIO_URL }}  --rekor-url ${{ inputs.REKOR_URL }} \
        --type vuln --predicate "${ATTESTATION}" ${{ steps.apko.outputs.digest }}

    - name: Upload Trivy results to GitHub Security
      if: inputs.UPLOAD_GITHUB_CODE == 'true' && inputs.RUN_TRIVY == 'true'
      uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
      with:
        sarif_file: trivy-results.sarif
    
    - name: Scan image with Anchore/Grype
      if: inputs.RUN_GRYPE == 'true'
      id: grype-scan
      uses: anchore/scan-action@7c05671ae9be166aeb155bad2d7df9121823df32 # v6.1.0
      with:
        image: ${{ steps.apko.outputs.digest }}
        fail-build: false
        severity-cutoff: low

    - name: Cosign Attest Grype results
      if: inputs.RUN_GRYPE == 'true'
      shell: bash
      id: grype-attest
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        ATTESTATION=$(mktemp)

        export SCANNER_URI=$(cat ${{ steps.grype-scan.outputs.sarif }} | jq -r .runs[0].tool.driver.informationUri)
        export SCANNER_VERSION=$(cat ${{ steps.grype-scan.outputs.sarif }} | jq -r .runs[0].tool.driver.version)

        echo "grype SCANNER_URI: $SCANNER_URI"
        echo "grype SCANNER_VERSION: $SCANNER_VERSION"

        cat > "${ATTESTATION}" <<EOF
        {
            "invocation": {
              "parameters": null,
              "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "event_id": "${{ github.run_id }}",
              "builder.id": "${{ github.workflow }}"
            },
            "scanner": {
              "uri": "$SCANNER_URI",
              "version": "$SCANNER_VERSION",
              "result": $(cat ${{ steps.grype-scan.outputs.sarif }} | jq .)
            },
            "metadata": {
              "scanStartedOn": "${{ steps.scan-start.outputs.date }}",
              "scanFinishedOn": "$(TZ=Zulu date "+%Y-%m-%dT%H:%M:%SZ")"
            }
        }
        EOF

        export COSIGN_EXPERIMENTAL="$COSIGN_EXPERIMENTAL"

        cosign attest --yes  --fulcio-url ${{ inputs.FULCIO_URL }}  --rekor-url ${{ inputs.REKOR_URL }} \
        --type vuln --predicate "${ATTESTATION}" ${{ steps.apko.outputs.digest }} 
    
    - name: Upload Grype results to GitHub Security
      if: inputs.UPLOAD_GITHUB_CODE == 'true' && inputs.RUN_GRYPE == 'true'
      uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

    - name: High Level Scan report
      id: scan-report
      shell: bash
      run: |
        GRYPE_COUNT="0"
        if [ "${{ inputs.RUN_GRYPE }}" = "true" ]; then
          GRYPE_COUNT=$(cat ${{ steps.grype-scan.outputs.sarif }} | jq '.runs[0].results | length')
        fi

        TRIVY_COUNT="0"
        if [ "${{ inputs.RUN_TRIVY }}" = "true" ]; then
          TRIVY_COUNT=$(cat trivy-results.sarif | jq '.runs[0].results | length')
        fi

        SNYK_COUNT="0"
        if [ "${{ inputs.RUN_SNYK }}" = "true" ]; then
          SNYK_COUNT=$(cat snyk.json | jq .uniqueCount)
        fi

        echo "SNYK_COUNT: $SNYK_COUNT, GRYPE_COUNT: $GRYPE_COUNT, TRIVY_COUNT: $TRIVY_COUNT"

        echo "SNYK_COUNT=$SNYK_COUNT" >> $GITHUB_OUTPUT
        echo "GRYPE_COUNT=$GRYPE_COUNT" >> $GITHUB_OUTPUT
        echo "TRIVY_COUNT=$TRIVY_COUNT" >> $GITHUB_OUTPUT

    - name: Cue Verify Attestation
      id: cue-verify
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        cat > vulnz.cue <<EOF
          predicateType: "https://cosign.sigstore.dev/attestation/vuln/v1"
        EOF
        
        export COSIGN_EXPERIMENTAL="$COSIGN_EXPERIMENTAL"
        
        cosign verify-attestation --rekor-url ${{ inputs.REKOR_URL }} \
          --type vuln --policy vulnz.cue ${{ steps.apko.outputs.digest }} --certificate-oidc-issuer "https://token.actions.githubusercontent.com" --certificate-identity "https://github.com/${{ github.workflow_ref }}" || \
          echo "WARNING: Could not verify attestation (is this a private image?)"
